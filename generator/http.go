package generator

import (
	"errors"
	"fmt"
	"net/http"
	"os"
	"regexp"
	"strings"

	"google.golang.org/protobuf/reflect/protoreflect"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

// 在生成的pb.go中引入的 包
const (
	contextPackage = protogen.GoImportPath("context")
	ginPackage     = protogen.GoImportPath("github.com/gin-gonic/gin")
	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
	errPkg         = protogen.GoImportPath("errors")
	metadataPkg    = protogen.GoImportPath("google.golang.org/grpc/metadata")
)

var methodSets = make(map[string]int)

// generateFile 生成代码文件
func GenerateFile(gen *protogen.Plugin, file *protogen.File, omitemptyPrefix string) *protogen.GeneratedFile {
	// 无服务时返回
	if len(file.Services) == 0 || !hasHTTPRule(file.Services) {
		return nil
	}
	//
	filename := file.GeneratedFilenamePrefix + "_gin_http.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-generator-go-http. DO NOT EDIT.")
	g.P("// versions:")
	g.P(fmt.Sprintf("// - protoc-generator-gin-http %s", ""))
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g, omitemptyPrefix)
	return g
}

// generateFileContent generates the kratos errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, omitemptyPrefix string) {
	if len(file.Services) == 0 {
		return
	}
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the kratos package it is being compiled against.")
	//g.P("// ", contextPackage.Ident(""), errPkg.Ident(""))
	g.P("//", ginPackage.Ident(""), grpcPackage.Ident(""), metadataPkg.Ident(""))
	g.P()

	for _, service := range file.Services {
		genService(gen, file, g, service, omitemptyPrefix)
	}
}

func genService(_ *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, omitemptyPrefix string) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// HTTP Server.
	sd := &ServiceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
	}
	for _, method := range service.Methods {
		// 不支持流
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		// 判断是否有http规则
		// 有可能一个rpc method 对应多个 url path
		// rpc GetArticles(GetArticlesReq) returns (GetArticlesResp) {
		//		option (google.api.http) = {
		//			get: "/v1/articles"
		//			additional_bindings {
		//				get: "/v1/author/{author_id}/articles"
		//			}
		//		};
		//	}
		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule != nil && ok {
			// 处理 additional_bindings
			for _, bind := range rule.AdditionalBindings {
				sd.Methods = append(sd.Methods, buildHTTPRule(g, service, method, bind, omitemptyPrefix))
			}
			sd.Methods = append(sd.Methods, buildHTTPRule(g, service, method, rule, omitemptyPrefix))
		}
	}
	if len(sd.Methods) != 0 {
		g.P(sd.execute())
	}
}

func hasHTTPRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}
			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			if rule != nil && ok {
				return true
			}
		}
	}
	return false
}

func buildHTTPRule(g *protogen.GeneratedFile, service *protogen.Service, m *protogen.Method, rule *annotations.HttpRule, omitemptyPrefix string) *MethodDesc {
	var (
		path         string
		method       string
		body         string
		responseBody string
	)

	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = http.MethodGet
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = http.MethodPut
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = http.MethodPost
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = http.MethodDelete
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = http.MethodPatch
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}
	// method 或者 path 不能为空
	if method == "" || path == "" {
		_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: %s or %s is not empty.\n", method, path)
	}
	body = rule.Body
	responseBody = rule.ResponseBody
	md := buildMethodDesc(g, m, method, path, omitemptyPrefix)
	// get 或者delete 请求不能有body
	if method == http.MethodGet || method == http.MethodDelete {
		if body != "" {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: %s %s body should not be declared.\n", method, path)
		}
	} else {
		if body == "" {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: %s %s does not declare a body.\n", method, path)
		}
	}
	if body == "*" {
		md.HasBody = true
		md.Body = ""
	} else if body != "" {
		md.HasBody = true
		md.Body = "." + camelCaseVars(body)
	} else {
		md.HasBody = false
	}
	if responseBody == "*" {
		md.ResponseBody = ""
	} else if responseBody != "" {
		md.ResponseBody = "." + camelCaseVars(responseBody)
	}
	return md
}

func buildMethodDesc(g *protogen.GeneratedFile, m *protogen.Method, method, path string, omitemptyPrefix string) *MethodDesc {
	defer func() { methodSets[m.GoName]++ }()

	ginPath, vars := buildPathVars(path, omitemptyPrefix)
	varFiledName := map[string]string{}
	for _, field := range vars {

		fields := m.Input.Desc.Fields()
		if strings.TrimSpace(field) == "" {
			fmt.Fprintf(os.Stderr, "\u001B[31mERROR\u001B[m: The corresponding field '%s' declaration in message could not be found in '%s'\n", field, path)
			os.Exit(2)
		}
		fd := fields.ByName(protoreflect.Name(field))
		if fd == nil {
			fmt.Fprintf(os.Stderr, "\u001B[31mERROR\u001B[m: The corresponding field '%s' declaration in message could not be found in '%s'\n", field, path)
			os.Exit(2)
		}
		if fd.IsMap() {
			fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: The field in path:'%s' shouldn't be a map.\n", field)
		} else if fd.IsList() {
			fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: The field in path:'%s' shouldn't be a list.\n", field)
		} else if fd.Kind() == protoreflect.MessageKind || fd.Kind() == protoreflect.GroupKind {
			fields = fd.Message().Fields()
		}
		if tagErr := checkGinUriFieldTag(m.Input, field); tagErr != nil {
			fmt.Fprintf(os.Stderr, "\u001B[31mERROR\u001B[m: %s\n", tagErr.Error())
		}
		varFiledName[field] = fd.TextName()
	}

	comment := m.Comments.Leading.String() + m.Comments.Trailing.String()
	if comment != "" {
		comment = "// " + m.GoName + strings.TrimPrefix(strings.TrimSuffix(comment, "\n"), "//")
	}
	return &MethodDesc{
		Name:         m.GoName,
		OriginalName: string(m.Desc.Name()),
		Num:          methodSets[m.GoName],
		Request:      g.QualifiedGoIdent(m.Input.GoIdent),
		Reply:        g.QualifiedGoIdent(m.Output.GoIdent),
		Comment:      comment,
		Path:         ginPath,
		Method:       method,
		HasVars:      len(vars) > 0,
		Vars:         vars,
	}
}

func checkGinUriFieldTag(msg *protogen.Message, fieldName string) error {
	filed, err := getFieldFromProto(msg, fieldName)
	if err != nil {
		return err
	}
	comment := getFieldComment(filed)
	if comment == "" {
		return errors.New(fmt.Sprintf("not find uri tag filed %s", fieldName))
	}
	uriTag := parseInjectTagsFromComment(comment)
	if uriTag == "" {
		return errors.New(fmt.Sprintf("not find uri tag filed %s", fieldName))
	}
	return nil
}

func getFieldComment(field *protogen.Field) string {
	//comment := field.Comments.Leading.String() + field.Comments.Trailing.String()
	comment := field.Comments.Leading.String()
	return comment
}

// getFieldFromProto 从protogen.Message中获取字段信息
func getFieldFromProto(msg *protogen.Message, fieldName string) (*protogen.Field, error) {
	for _, field := range msg.Fields {
		if string(field.Desc.Name()) == fieldName {
			return field, nil
		}
	}
	return nil, errors.New(fmt.Sprintf("not find filed %s", fieldName))
}

// 更完整的解析函数，可以同时解析form和uri标签
func parseInjectTagsFromComment(comment string) (uriTag string) {
	// 匹配 @inject_tag: 后面的内容
	injectRe := regexp.MustCompile(`@gotags:\s*([^\n]*)`)
	injectMatches := injectRe.FindStringSubmatch(comment)

	if len(injectMatches) < 1 {
		return ""
	}
	injectContent := strings.TrimSpace(injectMatches[1])
	// 解析uri标签
	uriRe := regexp.MustCompile(`uri:"([^"]*)"`)
	if uriMatches := uriRe.FindStringSubmatch(injectContent); len(uriMatches) > 1 {
		uriTag = uriMatches[1]
	}
	return uriTag
}

func buildPathVars(path, omitemptyPrefix string) (ginPath string, vars []string) {
	if strings.HasSuffix(path, "/") {
		fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: Path %s should not end with \"/\" \n", path)
	}
	ginPaths := strings.Split(path, "/")
	for i, p := range ginPaths {
		if p != "" && ((p[0] == '{' && p[len(p)-1] == '}') || p[0] == ':') {
			varParam := p[1 : len(p)-1]
			ginPaths[i] = ":" + varParam
			vars = append(vars, varParam)
		}
	}

	ginPath = "/" + strings.TrimPrefix(strings.Join(ginPaths, "/"), "/")
	if omitemptyPrefix != "" {
		prefix := strings.TrimPrefix(omitemptyPrefix, "/")
		ginPath = "/" + prefix
	}
	return
}

func camelCaseVars(s string) string {
	subs := strings.Split(s, ".")
	vars := make([]string, 0, len(subs))
	for _, sub := range subs {
		vars = append(vars, camelCase(sub))
	}
	return strings.Join(vars, ".")
}

// camelCase returns the CamelCased name.
// If there is an interior underscore followed by a lower case letter,
// drop the underscore and convert the letter to upper case.
// There is a remote possibility of this rewrite causing a name collision,
// but it's so remote we're prepared to pretend it's nonexistent - since the
// C++ generator lowercase names, it's extremely unlikely to have two fields
// with different capitalization.
// In short, _my_field_name_2 becomes XMyFieldName_2.
func camelCase(s string) string {
	if s == "" {
		return ""
	}
	t := make([]byte, 0, 32)
	i := 0
	if s[0] == '_' {
		// Need a capital letter; drop the '_'.
		t = append(t, 'X')
		i++
	}
	// Invariant: if the next letter is lower case, it must be converted
	// to upper case.
	// That is, we process a word at a time, where words are marked by _ or
	// upper case letter. Digits are treated as words.
	for ; i < len(s); i++ {
		c := s[i]
		if c == '_' && i+1 < len(s) && isASCIILower(s[i+1]) {
			continue // Skip the underscore in s.
		}
		if isASCIIDigit(c) {
			t = append(t, c)
			continue
		}
		// Assume we have a letter now - if not, it's a bogus identifier.
		// The next word is a sequence of characters that must start upper case.
		if isASCIILower(c) {
			c ^= ' ' // Make it a capital letter.
		}
		t = append(t, c) // Guaranteed not lower case.
		// Accept lower case sequence that follows.
		for i+1 < len(s) && isASCIILower(s[i+1]) {
			i++
			t = append(t, s[i])
		}
	}
	return string(t)
}

// Is c an ASCII lower-case letter?
func isASCIILower(c byte) bool {
	return 'a' <= c && c <= 'z'
}

// Is c an ASCII digit?
func isASCIIDigit(c byte) bool {
	return '0' <= c && c <= '9'
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

const deprecationComment = "// Deprecated: Do not use."
